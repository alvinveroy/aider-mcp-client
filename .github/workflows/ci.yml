name: CI

permissions:
  contents: write  # Required for creating/pushing tags
  id-token: write  # Required for OIDC authentication

on: 
  push:
    branches: [ main ]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Create virtual environment and install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install --upgrade pip
        uv pip install -e .[dev]
        uv pip install pytest pytest-cov
        # Try to install mcp with CLI tools using uv
        uv pip install "mcp[cli]" || echo "Could not install mcp package, continuing anyway"
    
    - name: Run tests
      run: |
        source .venv/bin/activate
        AIDER_MCP_TEST_MODE=true python -m pytest -v
    
    - name: Install and run flake8
      run: |
        source .venv/bin/activate
        uv pip install flake8
        flake8 aider_mcp_client

  release:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Clean up and reset version tags
        run: |
          # Delete any existing dev tags
          git tag -d $(git tag -l "v*dev*") || true
          git push origin --delete $(git tag -l "v*dev*") || true
          # Reset to base version if needed
          git tag -d v0.0.5 || true
          git tag v0.0.5
          git push origin v0.0.5

      - name: Validate version
        run: |
          python -c "
          from setuptools_scm import get_version
          version = get_version()
          if '.dev' in version and not version.endswith('.dev0'):
              raise ValueError(f'Invalid dev version {version} - must end with .dev0')
          print(f'Version validation passed: {version}')
          "

      - name: Build package
        run: |
          python -m pip install build setuptools-scm
          python -m build
          ls -la dist/

      - name: Extract version from built package
        id: extract-version
        run: |
          VERSION=$(python -c "from importlib.metadata import version; print(version('aider-mcp-client'))")
          # Normalize dev version to .dev0 format
          if [[ "$VERSION" == *".dev"* ]]; then
            BASE_VERSION=$(echo "$VERSION" | cut -d'.dev' -f1)
            VERSION="${BASE_VERSION}.dev0"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/*

      - name: Get version from SCM
        id: version
        run: |
          VERSION=$(python -c "from setuptools_scm import get_version; print(get_version())")
          # Normalize dev version to .dev0 format
          if [[ "$VERSION" == *".dev"* ]]; then
            BASE_VERSION=$(echo "$VERSION" | cut -d'.dev' -f1)
            VERSION="${BASE_VERSION}.dev0"
          fi
          # Only create tags for final releases (not dev versions)
          if [[ "$VERSION" != *".dev"* ]]; then
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "tag=v${VERSION}" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Git tag
        if: steps.version.outputs.is_release == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${{ steps.version.outputs.tag }}`,
              sha: context.sha
            })

      - name: Create release
        if: steps.version.outputs.is_release == 'true'
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.version.outputs.version }}
          tag_name: ${{ steps.version.outputs.tag }}
          generate_release_notes: true
          draft: false
          prerelease: false

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # No password needed when using trusted publishing
          packages-dir: dist/
